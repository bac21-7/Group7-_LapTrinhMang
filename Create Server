import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

public class RPSServer {
    private static final int PORT = 12345;

    // Hàng đợi ghép cặp (bọc sync khi thao tác)
    private static final Queue<ClientHandler> waitingPlayers = new LinkedList<>();

    // Game id an toàn đa luồng
    private static final AtomicInteger GAME_ID = new AtomicInteger(0);
    private static int nextGameId() { return GAME_ID.incrementAndGet(); }

       public static void main(String[] args) {
        System.out.println("-.- Server khoi dong o cong " + PORT + " roi nha may");
        try (ServerSocket serverSocket = new ServerSocket()) {
            serverSocket.setReuseAddress(true); // cho phép tái sử dụng cổng khi restart nhanh
            serverSocket.bind(new InetSocketAddress(PORT));

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("-> Mot nguoi choi moi da ket noi: " + clientSocket.getInetAddress());
                new Thread(new ClientHandler(clientSocket), "ClientHandler-" + clientSocket.getPort()).start();
            }
        } catch (IOException e) {
            System.out.println("Loi server: " + e.getMessage());
        }
    }
